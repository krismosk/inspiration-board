{"version":3,"sources":["components/Card.js","components/NewCardForm.js","components/Board.js","App.js","registerServiceWorker.js","index.js"],"names":["Emoji","require","Card","props","state","this","card","text","emoji","className","getUnicode","onClick","deleteCard","bind","type","React","Component","NewCardForm","onFormChange","event","value","target","name","setState","onFormSubmit","preventDefault","addCard","placeholder","onChange","Board","selectedCard","axios","delete","id","then","response","newCards","cards","filter","object","catch","error","message","post","updatedData","push","data","get","url","length","undefined","map","i","key","listCards","App","boardName","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","status","headers","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.66141a43.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport axios from 'axios';\nimport './Card.css';\nconst Emoji = require(\"emoji-dictionary\");\n\nclass Card extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n    };\n  }\n\n\n  render() {\n    const { text, emoji } = this.props.card;\n\n    return (\n      <div className=\"card\">\n        <section className=\"card__content\">\n          <p className=\"card__content-text\">{ text }</p>\n          <p className=\"card__content-emoji\">{ Emoji.getUnicode(`${emoji}`) }</p>\n        </section>\n        <button onClick={this.props.deleteCard.bind(this, this.props.card)} type=\"button\">Delete</button>\n      </div>\n    )\n  }\n}\n\nCard.propTypes = {\n  cards: PropTypes.array,\n  deleteCard: PropTypes.func,\n};\n\nexport default Card;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport emoji from 'emoji-dictionary';\nimport './NewCardForm.css';\n\nconst EMOJI_LIST = [\"\", \"heart_eyes\", \"beer\", \"clap\", \"sparkling_heart\", \"heart_eyes_cat\", \"dog\"]\n\nclass NewCardForm extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      text: '',\n      emoji: '',\n    }\n\n    this.onFormChange = this.onFormChange.bind(this);\n    this.onFormSubmit = this.onFormSubmit.bind(this);\n  }\n\n  onFormChange = (event) => {\n    let value = event.target.value\n    const name = event.target.name\n\n    this.setState({\n      [name]: value,\n    });\n  }\n\n  onFormSubmit = (event) => {\n    event.preventDefault();\n    \n    this.setState({\n      text: '',\n      emoji: '',\n    });\n\n    this.props.addCard({\n      text: this.state.text,\n      emoji: this.state.emoji,\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"new-card-form\">\n        <h3 className=\"new-card-form__header\">Create a new card!</h3>\n        <form className=\"new-card-form__form\">\n          <input \n            className=\"new-card-form__form-textarea\"\n            type=\"text\"\n            placeholder=\"Enter a text\"\n            onChange={this.onFormChange}\n            value={this.state.text}\n            name=\"text\" \n          />\n          <input \n            className=\"new-card-form__form-textarea\"\n            type=\"text\"\n            placeholder=\"Enter an emoji name\"\n            onChange={this.onFormChange}\n            value={this.state.emoji}\n            name=\"emoji\" \n          />\n          <div>\n            <input className=\"new-card-form__form-button\" onClick={this.onFormSubmit} type=\"submit\" value=\"Submit Card\"/>             \n          </div>\n        </form>\n      </div>\n    )\n  }\n\n}\n\nNewCardForm.propTypes = {\n  addCard: PropTypes.func,\n};\n\nexport default NewCardForm;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport axios from 'axios';\n\nimport './Board.css';\nimport Card from './Card';\nimport NewCardForm from './NewCardForm';\nimport CARD_DATA from '../data/card-data.json';\n\nclass Board extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      cards: [],\n    };\n  }\n\n  componentDidMount() {\n    axios.get(`${this.props.url}`)\n    .then((response) => {\n      this.setState({\n        cards: response.data,\n      });\n    })\n    .catch((error) => {\n      this.setState({ error: error.message });\n    });\n  }\n\n  deleteCard = (selectedCard) => {\n    axios.delete(`https://inspiration-board.herokuapp.com/cards/${selectedCard.id}`)\n      .then((response) => {\n        const newCards = this.state.cards.filter((object) => {\n          return object.card.id !== selectedCard.id;\n        });\n\n        this.setState({\n          cards: newCards,\n        });\n      })\n      .catch((error) => {\n        this.setState({ error: error.message });\n      });\n  }\n\n  addCard = (card) => {\n    axios.post('https://inspiration-board.herokuapp.com/boards/kristina/cards', card)\n      .then((response) => {\n        const updatedData = this.state.cards;\n        updatedData.push(response.data);\n        this.setState({\n          cards: updatedData,\n          error: '',\n        });\n      })\n      .catch((error) => {\n        this.setState({ error: error.message });\n      });\n  }\n\n  listCards(cards) {\n    let cardElements\n    \n    if (cards.length === 0 || cards === undefined) {\n      return \"\";\n    }\n    else {\n      cardElements = cards.map((card, i) => {\n        return (\n          <Card\n            key={i}\n            deleteCard={this.deleteCard}\n            {...card}\n          />\n        );\n      });\n    }\n\n    return cardElements;\n  }\n  \n\n  render() {\n    return (\n      <div>\n        <ul>\n          { this.listCards(this.state.cards) }\n        </ul>\n        <section>\n          <NewCardForm \n            addCard={this.addCard}\n          />\n        </section>\n      </div>\n    )\n  }\n\n}\n\nBoard.propTypes = {\n  url: PropTypes.string,\n  boardName: PropTypes.string,\n};\n\nexport default Board;\n","import React, { Component } from 'react';\nimport './App.css';\nimport Board from './components/Board';\n\nclass App extends Component {\n  render() {\n    return (\n      <section>\n        <header className=\"header\">\n          <h1 className=\"header__h1\"><span className=\"header__text\">Inspiration Board</span></h1>\n        </header>\n        <Board\n          url=\"https://inspiration-board.herokuapp.com/boards/kristina/cards\"\n          boardName={`kristina-moskalets`}\n          />\n      </section>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}